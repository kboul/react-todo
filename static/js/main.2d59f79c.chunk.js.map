{"version":3,"sources":["components/Todo.tsx","mockData/todos.ts","components/TodoForm.tsx","components/Main.tsx","components/App.tsx","serviceWorker.ts","index.tsx","sass/TodoForm.module.sass"],"names":["Todo","todo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","text","onClick","todos","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","styles","input","placeholder","onChange","target","Main","todosData","setTodos","newTodos","splice","map","id","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"oLAuCeA,EA7BoB,SAAC,GAK7B,IAJHC,EAIE,EAJFA,KACAC,EAGE,EAHFA,MACAC,EAEE,EAFFA,aACAC,EACE,EADFA,WAEA,OACI,yBAAKC,UAAU,wBACX,wBACIA,UAAU,kBACVC,MAAO,CACHC,eAAgBN,EAAKO,YAAc,eAAiB,KAEvDP,EAAKQ,KACN,4BACIJ,UAAU,0CACVK,QAAS,kBAAMN,EAAWF,KAF9B,KAKA,4BACIG,UAAU,qCACVK,QAAS,kBAAMP,EAAaD,KAFhC,eC3BHS,EAAsB,CAC/B,CACIF,KAAM,oBACND,aAAa,GAEjB,CACIC,KAAM,wBACND,aAAa,GAEjB,CACIC,KAAM,qBACND,aAAa,I,gBCmBNI,EAzB4B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAC9BC,mBAAiB,IADa,mBACjDC,EADiD,KAC1CC,EAD0C,KAUxD,OACI,yBAAKX,UAAU,eACX,0BAAMY,SATO,SAACC,GAClBA,EAAEC,iBACGJ,IACLF,EAAQE,GACRC,EAAS,OAMD,2BACII,KAAK,OACLf,UAAS,gBAAWgB,IAAOC,OAC3BC,YAAY,gBACZR,MAAOA,EACPS,SAAU,SAAAN,GAAC,OAAIF,EAASE,EAAEO,OAAOV,aCqBtCW,EAxCS,WAAO,IAAD,EACAZ,mBAAuBa,GADvB,mBACnBhB,EADmB,KACZiB,EADY,KAQpBzB,EAAe,SAACD,GAClB,IAAM2B,EAAsB,YAAOlB,GACnCkB,EAAS3B,GAAOM,aAAc,EAC9BoB,EAASC,IAGPzB,EAAa,SAACF,GAChB,IAAM2B,EAAsB,YAAOlB,GACnCkB,EAASC,OAAO5B,EAAO,GACvB0B,EAASC,IAGb,OACI,yBAAKxB,UAAU,OACX,yBAAKA,UAAU,YACX,wBAAIA,UAAU,cACTM,EAAMoB,IAAI,SAAC9B,EAAa+B,GAAd,OACP,kBAAC,EAAD,CACIC,IAAKD,EACL9B,MAAO8B,EACP/B,KAAMA,EACNE,aAAcA,EACdC,WAAYA,OAIxB,kBAAC,EAAD,CAAUS,QA/BN,SAACJ,GACb,IAAMoB,EAAsB,sBAAOlB,GAAP,CAAc,CAAEF,OAAMD,aAAa,KAC/DoB,EAASC,SCAFK,EARO,WAClB,OACI,yBAAK7B,UAAU,qBACX,kBAAC,EAAD,QCMQ8B,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCVRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiIzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC,gB,kBE1IzBC,EAAOC,QAAU,CAAC,MAAQ,0B","file":"static/js/main.2d59f79c.chunk.js","sourcesContent":["import React from 'react';\nimport { ITodo } from '../models/ITodo';\n\nexport interface TodoProps {\n    todo: ITodo;\n    index: number;\n    completeTodo: (arg1: number) => void;\n    removeTodo: (arg1: number) => void;\n}\n\nconst Todo: React.SFC<TodoProps> = ({\n    todo,\n    index,\n    completeTodo,\n    removeTodo\n}) => {\n    return (\n        <div className=\"col-md-6 offset-md-3\">\n            <li\n                className=\"list-group-item\"\n                style={{\n                    textDecoration: todo.isCompleted ? 'line-through' : ''\n                }}>\n                {todo.text}\n                <button\n                    className=\"btn btn-primary btn-sm float-right ml-2\"\n                    onClick={() => removeTodo(index)}>\n                    x\n                </button>\n                <button\n                    className=\"btn btn-primary btn-sm float-right\"\n                    onClick={() => completeTodo(index)}>\n                    Complete\n                </button>\n            </li>\n        </div>\n    );\n};\n\nexport default Todo;\n","import { ITodo } from '../models/ITodo';\n\nexport const todos: Array<ITodo> = [\n    {\n        text: 'Learn about React',\n        isCompleted: false\n    },\n    {\n        text: 'Meet friend for lunch',\n        isCompleted: false\n    },\n    {\n        text: 'Go out with Ioanna',\n        isCompleted: false\n    }\n];\n","import React, { useState } from 'react';\nimport styles from '../sass/TodoForm.module.sass';\n\nexport interface TodoFormProps {\n    addTodo: (arg1: string) => void;\n}\n\nconst TodoForm: React.SFC<TodoFormProps> = ({ addTodo }) => {\n    const [value, setValue] = useState<string>('');\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        if (!value) return;\n        addTodo(value);\n        setValue('');\n    };\n\n    return (\n        <div className=\"text-center\">\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    className={`input ${styles.input}`}\n                    placeholder=\"Add a todo...\"\n                    value={value}\n                    onChange={e => setValue(e.target.value)}\n                />\n            </form>\n        </div>\n    );\n};\n\nexport default TodoForm;\n","import React, { useState } from 'react';\nimport Todo from './Todo';\nimport { todos as todosData } from '../mockData/todos';\nimport TodoForm from './TodoForm';\nimport { ITodo } from '../models/ITodo';\n\nconst Main: React.SFC = () => {\n    const [todos, setTodos] = useState<Array<ITodo>>(todosData);\n\n    const addTodo = (text: string) => {\n        const newTodos: Array<ITodo> = [...todos, { text, isCompleted: false }];\n        setTodos(newTodos);\n    };\n\n    const completeTodo = (index: number) => {\n        const newTodos: Array<ITodo> = [...todos];\n        newTodos[index].isCompleted = true;\n        setTodos(newTodos);\n    };\n\n    const removeTodo = (index: number) => {\n        const newTodos: Array<ITodo> = [...todos];\n        newTodos.splice(index, 1);\n        setTodos(newTodos);\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"todoList\">\n                <ul className=\"list-group\">\n                    {todos.map((todo: ITodo, id: number) => (\n                        <Todo\n                            key={id}\n                            index={id}\n                            todo={todo}\n                            completeTodo={completeTodo}\n                            removeTodo={removeTodo}\n                        />\n                    ))}\n                </ul>\n                <TodoForm addTodo={addTodo} />\n            </div>\n        </div>\n    );\n};\n\nexport default Main;\n","import React from 'react';\nimport Main from './Main';\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"container mx-auto\">\n            <Main />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"TodoForm_input__1LGkv\"};"],"sourceRoot":""}