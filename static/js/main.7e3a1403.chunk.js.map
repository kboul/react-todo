{"version":3,"sources":["Todos/Todo/index.tsx","Todos/TodoForm/index.tsx","Todos/constants.ts","Todos/index.tsx","Todos/TodoForm/utils.ts","App/index.tsx","serviceWorker.ts","index.tsx","Todos/TodoForm/index.module.sass"],"names":["Todo","todo","index","completeTodo","removeTodo","data-test","className","style","textDecoration","isCompleted","text","type","onClick","TodoForm","addTodo","React","useState","value","setValue","onSubmit","e","preventDefault","styles","input","placeholder","onChange","target","todos","Todos","todosData","setTodos","newTodos","splice","map","id","key","Math","random","toString","substr","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"gLAqCeA,EAlCa,SAAC,GAKX,IAJdC,EAIa,EAJbA,KACAC,EAGa,EAHbA,MACAC,EAEa,EAFbA,aACAC,EACa,EADbA,WAEA,OACI,yBAAKC,YAAU,iBAAiBC,UAAU,wBACtC,wBACIA,UAAU,kBACVD,YAAU,YACVE,MAAO,CACHC,eAAgBP,EAAKQ,YAAc,eAAiB,KAEvDR,EAAKS,KACN,4BACIC,KAAK,SACLL,UAAU,0CACVD,YAAU,kBACVO,QAAS,kBAAMR,EAAWF,KAJ9B,KAOA,4BACIS,KAAK,SACLL,UAAU,qCACVD,YAAU,oBACVO,QAAS,kBAAMT,EAAaD,KAJhC,e,gBCODW,EA5BoC,SAAC,GAE9B,IADlBC,EACiB,EADjBA,QACiB,EACSC,IAAMC,SAAiB,IADhC,mBACVC,EADU,KACHC,EADG,KAUjB,OACI,yBAAKb,YAAU,sBAAsBC,UAAU,eAC3C,0BAAMD,YAAU,aAAac,SAThB,SAACC,GAClBA,EAAEC,iBACGJ,IACLH,EAAQG,GACRC,EAAS,OAMD,2BACIP,KAAK,OACLN,YAAU,YACVC,UAAS,gBAAWgB,IAAOC,OAC3BC,YAAY,gBACZP,MAAOA,EACPQ,SAAU,SAAAL,GAAC,OAAIF,EAASE,EAAEM,OAAOT,aCvBxCU,EAAsB,CAC/B,CACIjB,KAAM,oBACND,aAAa,GAEjB,CACIC,KAAM,wBACND,aAAa,GAEjB,CACIC,KAAM,qBACND,aAAa,ICmCNmB,EAzCU,WAAO,IAAD,EACDb,IAAMC,SAAuBa,GAD5B,mBACpBF,EADoB,KACbG,EADa,KAQrB3B,EAAe,SAACD,GAClB,IAAM6B,EAAsB,YAAOJ,GACnCI,EAAS7B,GAAOO,aAAc,EAC9BqB,EAASC,IAGP3B,EAAa,SAACF,GAChB,IAAM6B,EAAsB,YAAOJ,GACnCI,EAASC,OAAO9B,EAAO,GACvB4B,EAASC,IAGb,OACI,yBAAK1B,YAAU,mBACX,wBAAIC,UAAU,cACTqB,EAAMM,KAAI,SAAChC,EAAaiC,GAAd,OACP,yBAAK7B,YAAU,iBAAiB8B,IC9B1C,IAAN,OAAWC,KAAKC,SACXC,SAAS,IACTC,OAAO,EAAG,KD6BK,kBAAC,EAAD,CACIrC,MAAOgC,EACPjC,KAAMA,EACNE,aAAcA,EACdC,WAAYA,SAK5B,yBAAKC,YAAU,uBACX,kBAAC,EAAD,CAAUS,QAhCN,SAACJ,GACb,IAAMqB,EAAsB,sBAAOJ,GAAP,CAAc,CAAEjB,OAAMD,aAAa,KAC/DqB,EAASC,SEDFS,EARC,WACZ,OACI,yBAAKnC,YAAU,gBAAgBC,UAAU,0BACrC,kBAAC,EAAD,QCMQmC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCVRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiIzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,iB,kBE1IzBC,EAAOC,QAAU,CAAC,MAAQ,0B","file":"static/js/main.7e3a1403.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { TodoProps } from './models';\n\nconst Todo: FC<TodoProps> = ({\n    todo,\n    index,\n    completeTodo,\n    removeTodo\n}: TodoProps) => {\n    return (\n        <div data-test=\"component-todo\" className=\"col-md-6 offset-md-3\">\n            <li\n                className=\"list-group-item\"\n                data-test=\"todo-list\"\n                style={{\n                    textDecoration: todo.isCompleted ? 'line-through' : ''\n                }}>\n                {todo.text}\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary btn-sm float-right ml-2\"\n                    data-test=\"remove-todo-btn\"\n                    onClick={() => removeTodo(index)}>\n                    x\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary btn-sm float-right\"\n                    data-test=\"complete-todo-btn\"\n                    onClick={() => completeTodo(index)}>\n                    Complete\n                </button>\n            </li>\n        </div>\n    );\n};\n\nexport default Todo;\n","import React, { FunctionComponent } from 'react';\nimport styles from './index.module.sass';\nimport { TodoFormProps } from './models';\n\nconst TodoForm: FunctionComponent<TodoFormProps> = ({\n    addTodo\n}: TodoFormProps) => {\n    const [value, setValue] = React.useState<string>('');\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        if (!value) return;\n        addTodo(value);\n        setValue('');\n    };\n\n    return (\n        <div data-test=\"component-todo-form\" className=\"text-center\">\n            <form data-test=\"form-input\" onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    data-test=\"input-box\"\n                    className={`input ${styles.input}`}\n                    placeholder=\"Add a todo...\"\n                    value={value}\n                    onChange={e => setValue(e.target.value)}\n                />\n            </form>\n        </div>\n    );\n};\n\nexport default TodoForm;\n","import { ITodo } from './models';\n\nexport const todos: Array<ITodo> = [\n    {\n        text: 'Learn about React',\n        isCompleted: false\n    },\n    {\n        text: 'Meet friend for lunch',\n        isCompleted: false\n    },\n    {\n        text: 'Go out with Ioanna',\n        isCompleted: false\n    }\n];\n","import React from 'react';\nimport Todo from './Todo';\nimport TodoForm from './TodoForm';\nimport { ITodo } from './models';\nimport { todos as todosData } from './constants';\nimport { idGenerator } from './TodoForm/utils';\n\nconst Todos: React.SFC = () => {\n    const [todos, setTodos] = React.useState<Array<ITodo>>(todosData);\n\n    const addTodo = (text: string) => {\n        const newTodos: Array<ITodo> = [...todos, { text, isCompleted: false }];\n        setTodos(newTodos);\n    };\n\n    const completeTodo = (index: number) => {\n        const newTodos: Array<ITodo> = [...todos];\n        newTodos[index].isCompleted = true;\n        setTodos(newTodos);\n    };\n\n    const removeTodo = (index: number) => {\n        const newTodos: Array<ITodo> = [...todos];\n        newTodos.splice(index, 1);\n        setTodos(newTodos);\n    };\n\n    return (\n        <div data-test=\"component-todos\">\n            <ul className=\"list-group\">\n                {todos.map((todo: ITodo, id: number) => (\n                    <div data-test=\"component-todo\" key={idGenerator()}>\n                        <Todo\n                            index={id}\n                            todo={todo}\n                            completeTodo={completeTodo}\n                            removeTodo={removeTodo}\n                        />\n                    </div>\n                ))}\n            </ul>\n            <div data-test=\"component-todo-form\">\n                <TodoForm addTodo={addTodo} />\n            </div>\n        </div>\n    );\n};\n\nexport default Todos;\n","export const idGenerator = (): string => {\n    return `_${Math.random()\n        .toString(36)\n        .substr(2, 9)}`;\n};\n","import React, { FC } from 'react';\nimport Main from '../Todos';\n\nconst App: FC = () => {\n    return (\n        <div data-test=\"component-app\" className=\"container mx-auto mt-4\">\n            <Main />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"TodoForm_input__B83Oe\"};"],"sourceRoot":""}